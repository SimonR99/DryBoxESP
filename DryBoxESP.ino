#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "ESP8266httpUpdate.h"

#ifndef STASSID
#define STASSID "Lord of the ping"
#define STAPSK  "*******"
#endif

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

const char* ssid = STASSID;
const char* password = STAPSK;
const char* version = "1.5";

#define LOGO_HEIGHT   64
#define LOGO_WIDTH    128
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

float internalHumidity = 0.0f;
float externalHumidity = 0.0f;

char* serverName = "http://simonroy.pythonanywhere.com/api/publish_humidity/";

static const unsigned char PROGMEM logo_bmp[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1F, 0xFF, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1F, 0xFF, 0x00, 0x01, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1F, 0xFF, 0x00, 0x01, 0x80, 0x18, 0x00, 0x00, 0x00, 0x30, 0x06, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1F, 0xFE, 0x00, 0x01, 0x80, 0x0C, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1F, 0xFE, 0x00, 0x01, 0x80, 0x04, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1F, 0xFE, 0x00, 0x01, 0x80, 0x02, 0x19, 0x88, 0x04, 0x30, 0x03, 0x00, 0xE0, 0x20, 0x10,
  0x00, 0x1F, 0xFF, 0xFF, 0xC1, 0x80, 0x02, 0x1B, 0x88, 0x04, 0x30, 0x02, 0x03, 0xF8, 0x10, 0x10,
  0x00, 0x3F, 0xFF, 0xFF, 0xC1, 0x80, 0x02, 0x1C, 0x08, 0x04, 0x30, 0x02, 0x04, 0x04, 0x10, 0x20,
  0x00, 0x3F, 0xFF, 0xFF, 0xC1, 0x80, 0x03, 0x18, 0x04, 0x08, 0x30, 0x06, 0x0C, 0x06, 0x08, 0x40,
  0x00, 0x3F, 0xFF, 0xFF, 0x81, 0x80, 0x03, 0x18, 0x04, 0x08, 0x3F, 0xFC, 0x08, 0x02, 0x04, 0x40,
  0x00, 0x3F, 0xFF, 0xFF, 0x81, 0x80, 0x03, 0x18, 0x04, 0x08, 0x3F, 0xFC, 0x08, 0x02, 0x04, 0x80,
  0x00, 0x3F, 0xFF, 0xFF, 0x01, 0x80, 0x03, 0x18, 0x02, 0x10, 0x30, 0x02, 0x18, 0x03, 0x03, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0x01, 0x80, 0x02, 0x18, 0x02, 0x10, 0x30, 0x01, 0x18, 0x03, 0x03, 0x00,
  0x00, 0x3F, 0xFF, 0xFE, 0x01, 0x80, 0x02, 0x18, 0x02, 0x10, 0x30, 0x01, 0x18, 0x03, 0x03, 0x00,
  0x00, 0x3F, 0xFF, 0xFC, 0x01, 0x80, 0x02, 0x18, 0x01, 0x20, 0x30, 0x01, 0x88, 0x02, 0x04, 0x80,
  0x00, 0x00, 0x07, 0xFC, 0x01, 0x80, 0x04, 0x18, 0x01, 0x20, 0x30, 0x01, 0x08, 0x02, 0x04, 0x80,
  0x00, 0x00, 0x07, 0xF8, 0x01, 0x80, 0x0C, 0x18, 0x01, 0x20, 0x30, 0x01, 0x0C, 0x06, 0x08, 0x40,
  0x00, 0x00, 0x07, 0xF8, 0x01, 0x80, 0x18, 0x18, 0x00, 0xC0, 0x30, 0x02, 0x04, 0x04, 0x10, 0x20,
  0x00, 0x00, 0x07, 0xF0, 0x01, 0xFF, 0xE0, 0x18, 0x00, 0xC0, 0x3F, 0xFC, 0x03, 0xF8, 0x10, 0x20,
  0x00, 0x00, 0x07, 0xF0, 0x01, 0xFF, 0x00, 0x18, 0x00, 0xC0, 0x3F, 0xE0, 0x00, 0xC0, 0x20, 0x10,
  0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
void setup() {
  pinMode(2, OUTPUT);
  randomSeed(analogRead(0));
  
  Serial.begin(115200);
  Serial.println("Booting");
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }
  // Clear the buffer
  display.clearDisplay();

  drawSplashScreen(); // Draw the logo

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }

  // Port defaults to 8266
  // ArduinoOTA.setPort(8266);

  // Hostname defaults to esp8266-[ChipID]
  // ArduinoOTA.setHostname("myesp8266");

  // No authentication by default
  // ArduinoOTA.setPassword("admin");

  // Password can be set with it's md5 value as well
  // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
  // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

  ArduinoOTA.onStart([]() {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH) {
      type = "sketch";
    } else { // U_FS
      type = "filesystem";
    }

    // NOTE: if updating FS this would be the place to unmount FS using FS.end()
    Serial.println("Start updating " + type);
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) {
      Serial.println("Auth Failed");
    } else if (error == OTA_BEGIN_ERROR) {
      Serial.println("Begin Failed");
    } else if (error == OTA_CONNECT_ERROR) {
      Serial.println("Connect Failed");
    } else if (error == OTA_RECEIVE_ERROR) {
      Serial.println("Receive Failed");
    } else if (error == OTA_END_ERROR) {
      Serial.println("End Failed");
    }
  });
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  IPAddress dns(8, 8, 8, 8);
  //WiFi.setDNS(dns);
  //WiFi.dnsIP(dns);
  checkUpdate();
}

void loop() {

  digitalWrite(2, HIGH);
  delay(3000);
  digitalWrite(2, LOW);
  delay(3000);
  checkUpdate();
  drawHumidityScreen();
  ArduinoOTA.handle();
  //TO DO : Add humidity sensor and remove delay (use millis - time instead)
  internalHumidity = random(20)+50;
  externalHumidity = random(20)+70;
  sendHumidity(internalHumidity, externalHumidity);
}


void sendHumidity(int internal, int external) {

  
  WiFiClient client;
  HTTPClient http;


  String serverPath = serverName + String(internal) + "/" + String(external) +"/";

  Serial.println(serverPath);
    
  // Your IP address with path or Domain name with URL path 
  http.begin(client, serverPath.c_str());
  http.addHeader("X-Esp8266-Mac", WiFi.macAddress());
  
  // Send HTTP POST request
  int httpResponseCode = http.GET();
  Serial.println(httpResponseCode);
  
}


void drawHumidityScreen(void) {
  drawHeader();
  display.setTextSize(2);      // Normal 1:1 pixel scale
  display.cp437(true);         // Use full 256 char 'Code Page 437' font

  // Not all the characters will fit on the display. This is normal.
  // Library will draw what it can and the rest will be clipped.
  display.write("In : 40%\n");
  display.write("Out : 60%");

  display.display();
}

void drawSplashScreen(void) {
  drawHeader();
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
}

void drawUpdateScreen(void) {
  display.setTextSize(2);      // Normal 1:1 pixel scale
  display.cp437(true);         // Use full 256 char 'Code Page 437' font

  // Not all the characters will fit on the display. This is normal.
  // Library will draw what it can and the rest will be clipped.
  display.write("Updating.. \n\n");
  display.setTextSize(1);
  display.write("Do not turn off");

  display.display();
}

void drawHeader(void) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);     // Start at top-left corner
  display.setTextColor(WHITE); // Draw white text
  //const char[] headerText = "Wifi : On    V" + version + "\n\n";
  display.write("Wifi : On    V");
  display.write(version);
  display.write("\n\n");
}

void checkUpdate(void) {
  WiFiClient client;
  t_httpUpdate_return ret = ESPhttpUpdate.update(client, "simonroy.pythonanywhere.com", 80, "/binary/", version);
  switch (ret) {
    case HTTP_UPDATE_FAILED:
      Serial.println("[update] Update failed.");
      break;
    case HTTP_UPDATE_NO_UPDATES:
      Serial.println("[update] No update.");
      break;
    case HTTP_UPDATE_OK:
      drawUpdateScreen();
      Serial.println("[update] Update ok."); // may not be called since we reboot the ESP
      break;
  }
}
